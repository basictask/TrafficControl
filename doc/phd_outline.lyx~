#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\float_placement H
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Traffic Control and Infrastructure Organization Using Reinforcement Learning
\end_layout

\begin_layout Author
Daniel Kuknyo
\end_layout

\begin_layout Date
2022.09.26.
\end_layout

\begin_layout Address
PhD / MsC outline
\end_layout

\begin_layout Part
Introduction
\end_layout

\begin_layout Standard
In recent years the traffic of cities became a rising topic with more and
 more city governments realizing that a motor-focused city design is unsustainab
le.
 Cities all around western Europe have started designing their cities around
 humans and public transit, and not around cars.
 E.g.
 Paris is planning to be a 15-minute city, Barcelona is incorporating the
 superblock design, Finland is creating non-intersecting paths between the
 common intersections and the Dutch are using intelligent traffic light
 systems to manipulate traffic flow in order to optimize it for both cars
 and pedestrians.
 
\end_layout

\begin_layout Standard
If one takes a look at how the Dutch infrastructure is designed, they will
 see that despite having less car lanes and overall less space for cars,
 the traffic flows more smoothly.
 This is thanks to the intelligent design of intersections, traffic lights
 and infrastructure.
 The methodology of this has been known ever since the 1970s, but the auto
 industry has been fighting against it ever since in order to gain more
 market.
 In Northern America one can observe what happens if a city is designed
 with cars in mind, requiring everyone to own a vehicle in order to participate
 in society.
 This results in worse accessibility to the city for the disabled, incapable,
 elderly and young people as well.
 The methodology of how to create walkable, human-centered and intelligent
 infrastructure that is optimal for both pedestrians and cars is laid out
 in detail by books from authors such as Strong Towns, an urban planning
 organization.
\end_layout

\begin_layout Standard
The aim for this research is to able to model a system of roads or city,
 and being able to pinpoint mistakes made by development engineers, with
 the goal in mind to make the city more humanly livable, liquidate urban
 highways and make traffic infrastructure more efficient.
\end_layout

\begin_layout Part
Goals and Outline
\end_layout

\begin_layout Standard
The project will focus on building an interface that models traffic flow
 in a graph-based structure, then train a reinforcement learning algorithm
 to find the optimal configuration of the roads in order to transport the
 most cars in the most effective way possible.
 Here's when the urban design principles come in: one can easily observe
 that the most effective way to transport as many cars as possible is if
 all roads are 8-lane highways.
 However it's also easy to see that it's miserable to live in a city where
 there are no quiet, auto-low streets and only 8-lane highways.
 This might be the best configuration for cars, but it would make the life
 of people living in the city absolutely horrible.
 The rewarding system of the reinforcement learning environment will be
 designed in order to reflect these principles: building cost, traffic light/rou
ndabout tradeoffs, how humans would feel living next to the road.
 The agent will have to decide where to build, destruct, or make roads 1-way
 to make the city's transportation flow dynamic but also make it livable
 for humans.
 The rewarding scheme will reflect the principles laid down by Strong Towns
 and other urban planning organizations significant in the field like Happy
 Cities: Transforming Our Lives through urban design.
\end_layout

\begin_layout Part
Methodology
\end_layout

\begin_layout Section
Constructing a city 
\end_layout

\begin_layout Standard
The developed software will provide an interface where the user can make
 a graph, describing the intersections (nodes) and roads (edges) of the
 city in question.
 This for example can be done in GeoGebra and exported into a construction
 protocol in order to work as an input for the model.
 Below is an example simple city constructed:
\end_layout

\begin_layout Standard
\align center
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset Graphics
	filename simple_city.png
	width 8cm
	height 8cm
	keepAspectRatio

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The interface will read a construction protocol, construct a graph and all
 the possible pathways from it.
 And create a starting configuration with 2-way roads between all the nodes
 of the graph.
 The vehicle rate and distribution can be controlled before starting the
 simulation.
 A constructed 
\begin_inset Quotes eld
\end_inset

starting
\begin_inset Quotes erd
\end_inset

 city according to the previously shown graph will look like as follows:
\end_layout

\begin_layout Standard
\align center
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset Graphics
	filename simple_city_road.png
	width 8cm
	height 8cm
	keepAspectRatio

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
So far this is a simple configuration for demonstration.
 The vehicles are passing from one entry point to another, without necessarily
 choosing the shortest path, or being evenly distributed among all the roads,
 just as one would find in real life.
 The drivers' model will incorporate an intelligent behavior, like slowing
 down after the car in front is slowing down or gradually speeding up after
 a light has turned green with a comfortable acceleration parameter.
 
\end_layout

\begin_layout Standard
The road configuration will be examined with multiple metrics like how many
 steps does it take for the roads to transport 100 cars or how much the
 road infrastructure would cost.
 If the agent is handed a road configuration it will be able to find the
 optimal one, with the least cost, least unnecessary roads and fastest transport
ation for a given amount of cars.
 
\end_layout

\begin_layout Standard
As a distant goal it would also be reasonable for the application to accept
 Osmosis data and construct a graph based on that.
 This would require a more sophisticated preprocessor as the Osmosis data
 would have to be stripped of metadata and guarantees of format conversions
 between world-coordinates and graph-node coordinates would have to be implement
ed.
 However it is possible to convert into the inner representation format
 of the road simulation module.
 Osmosis construction has the following steps: 
\end_layout

\begin_layout Enumerate
Highlight a map segment
\end_layout

\begin_layout Enumerate
Load it into a graph
\end_layout

\begin_layout Enumerate
Load the graph into a simulation
\end_layout

\begin_layout Standard
The steps are visualized on the following graphics from left to right: 
\end_layout

\begin_layout Standard
\align center
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset Graphics
	filename bakats_full_process.png
	width 10cm
	height 10cm
	keepAspectRatio

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Intelligent driver model
\end_layout

\begin_layout Standard
The intelligent driver model is a time-continuous car following model for
 the simulation of urban traffic.
 It describes the behavior of the drivers.
 and the positions of vehicles.
 The model defines 6 parameters that influence how a driver behaves:
\end_layout

\begin_layout Enumerate
\begin_inset Formula $v_{0}$
\end_inset

: The desired velocity of the vehicle.
\end_layout

\begin_layout Enumerate
\begin_inset Formula $T$
\end_inset

: Safe following time.
\end_layout

\begin_layout Enumerate
\begin_inset Formula $a$
\end_inset

: Maximum acceleration.
\end_layout

\begin_layout Enumerate
\begin_inset Formula $b$
\end_inset

: Comfortable deceleration.
\end_layout

\begin_layout Enumerate
\begin_inset Formula $\delta$
\end_inset

: Acceleration exponent.
\end_layout

\begin_layout Enumerate
\begin_inset Formula $s_{0}$
\end_inset

: Minimum distance.
\end_layout

\begin_layout Standard
Using these variables and the positions of other vehicles it is possible
 at every time step to completely determine the position of every vehicle.
 Furthermore, vehicles can influence eachothers' positions, as there can
 be car pileups in an intersection with cars waiting for eachother.
 This model will consider only cars of uniform size, without taking into
 account other types of vehicles like vans and semitrucks.
 Every driver is assumed to have the same skillset e.g.
 safe following time, comfortable deceleration and so on.
 This can be a fairly good approximation of a real world driver's parameters.
 
\end_layout

\begin_layout Section
Deep learning configuration
\end_layout

\begin_layout Subsection
Action space
\end_layout

\begin_layout Standard
A starting configuration will provide the agent with a 2-way road between
 each graph node.
 From here on the goal is to add / destroy roads, lanes and intersections
 in order to optimize the throughput and cost of the road.
 Each action of the agent will take two graph nodes as a parameter and the
 roads will be configured accordingly.
 Any action for node 
\begin_inset Formula $A$
\end_inset

 and 
\begin_inset Formula $B$
\end_inset

 will assume a single directed edge 
\begin_inset Formula $A\rightarrow B$
\end_inset

 starting for 
\begin_inset Formula $A$
\end_inset

 and ending in 
\begin_inset Formula $B$
\end_inset

.
 There are cases where semantically it would make more sense to have more
 or less than 2 parameters but these cases can be generalized to an action
 with two parameters and hence be channeled into a neural network output
 of the same shape and size as all other cases.
\end_layout

\begin_layout Standard
The list of actions for the discrete action space: 
\end_layout

\begin_layout Enumerate

\shape italic
add_lane(
\begin_inset Formula $A,B$
\end_inset

): 
\emph on
Adds a single one way lane going from 
\begin_inset Formula $A\rightarrow B$
\end_inset

.
\end_layout

\begin_layout Enumerate

\emph on
remove_lane(
\begin_inset Formula $A,B$
\end_inset

): 
\emph default
Removes a single lane going from 
\begin_inset Formula $A\rightarrow B$
\end_inset

.
\end_layout

\begin_layout Enumerate

\emph on
add_road(
\begin_inset Formula $A,B$
\end_inset

): 
\emph default
Adds two lanes between the nodes 
\begin_inset Formula $A$
\end_inset

 and 
\begin_inset Formula $B$
\end_inset

 going 
\begin_inset Formula $A\rightarrow B$
\end_inset

 and 
\begin_inset Formula $B\rightarrow A$
\end_inset

.
 Only valid in case of nodes that don't have edges connecting them.
\end_layout

\begin_layout Enumerate

\emph on
remove_road(
\begin_inset Formula $A,B$
\end_inset

): 
\emph default
Removes two lanes between nodes 
\begin_inset Formula $A$
\end_inset

 and 
\begin_inset Formula $B$
\end_inset

 going from 
\begin_inset Formula $A\rightarrow B$
\end_inset

 and 
\begin_inset Formula $B\rightarrow A$
\end_inset

.
 Only valid between nodes that have edges connecting them.
 
\end_layout

\begin_layout Enumerate

\emph on
add_trafficlight(
\begin_inset Formula $A,B$
\end_inset

): 
\emph default
Creates a traffic light system to all roads entering the intersection of
 graph node 
\begin_inset Formula $B$
\end_inset

.
\end_layout

\begin_layout Enumerate

\emph on
add_roundabout(
\begin_inset Formula $A,B$
\end_inset

): 
\emph default
Adds a roundabout to all roads entering the intersection of graph node 
\begin_inset Formula $B$
\end_inset

.
\end_layout

\begin_layout Enumerate

\emph on
add_righthand(
\begin_inset Formula $A,B$
\end_inset

): 
\emph default
Removes current traffic light and roundabout infrastructure to create a
 right-hand priority intersection in graph node 
\begin_inset Formula $B$
\end_inset

.
\end_layout

\begin_layout Subsection
State space
\end_layout

\begin_layout Subsubsection*
Representation
\end_layout

\begin_layout Standard
First, the plan will focus on how to represent a certain type of road between
 two nodes.
 The state between graph node 
\begin_inset Formula $A$
\end_inset

 and 
\begin_inset Formula $B$
\end_inset

 will have to be represented by a single number in every case.
 The bases that this scalar value will have to cover the number of lanes
 between 
\begin_inset Formula $A\rightarrow B$
\end_inset

 and the type of intersection in the node 
\begin_inset Formula $B$
\end_inset

.
 
\end_layout

\begin_layout Standard
For a state-vector element corresponding to the one-way connection between
 nodes 
\begin_inset Formula $A$
\end_inset

 and 
\begin_inset Formula $B$
\end_inset

 the possible values are as follows:
\end_layout

\begin_layout Enumerate
One-lane road between 
\begin_inset Formula $A\rightarrow B\Longrightarrow1$
\end_inset

.
\end_layout

\begin_layout Enumerate
Two-lane road betwen 
\begin_inset Formula $A\rightarrow B\Longrightarrow2$
\end_inset

.
\end_layout

\begin_layout Enumerate
Two-way road, one lane in each direction: 
\begin_inset Formula $A\rightarrow B\Longrightarrow1;$
\end_inset

 
\begin_inset Formula $B\rightarrow A\Longrightarrow1$
\end_inset

.
\end_layout

\begin_layout Enumerate
Two way road, two lanes in each direction: 
\begin_inset Formula $A\rightarrow B\Longrightarrow2;$
\end_inset

 
\begin_inset Formula $B\rightarrow A\Longrightarrow2$
\end_inset

.
\end_layout

\begin_layout Enumerate
One-lane road ending in roundabout between 
\begin_inset Formula $A\rightarrow B\Longrightarrow$
\end_inset

11.
\end_layout

\begin_layout Enumerate
Two-lane road ending in a traffic light junction between 
\begin_inset Formula $A\rightarrow B\Longrightarrow22$
\end_inset

.
\end_layout

\begin_layout Standard
The state vector keeps track of the connections in a directed fashion, storing
 the number of lanes from 
\begin_inset Formula $A\rightarrow B$
\end_inset

 and 
\begin_inset Formula $B\rightarrow A$
\end_inset

 in separate values.
 A single scalar of 
\begin_inset Formula $k$
\end_inset

 means that it's a 
\begin_inset Formula $k$
\end_inset

-laned road ending in a right-hand priority intersection without any dedicated
 infrastructure.
 A scalar of value 
\begin_inset Formula $10<k<20$
\end_inset

 means that the road ends in a roundabout.
 A scalar of value 
\begin_inset Formula $20<k<30$
\end_inset

 means that the road ends in a traffic light based junction.
 The last digit always translates to the number of lanes going from 
\begin_inset Formula $A\rightarrow B$
\end_inset

.
\end_layout

\begin_layout Subsubsection*
Naive implementation
\end_layout

\begin_layout Standard
The state space requires precise designing and execution as there's a possibilit
y of exponential explosion if it's represented using an all-to-all fashion.
 If the state space keeps track of all the incoming connections from all
 the nodes to all other nodes, for a graph 
\begin_inset Formula $G$
\end_inset

 of 
\begin_inset Formula $k$
\end_inset

 nodes the state space will require a vector of length 
\begin_inset Formula $k^{2}-k$
\end_inset

.
 There's no need to record the recusive connections.
\end_layout

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="9">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $N_{1}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $N_{1}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $N_{1}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $N_{1}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $...$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $N_{k}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $N_{k}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $N_{k}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $N_{k}$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\xout off
\uuline off
\uwave off
\noun off
\color none
\begin_inset Formula $N_{2}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $N_{3}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $...$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $N_{k}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $...$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $N_{1}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $N_{2}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $...$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $N_{k-1}$
\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
This gives reason to explore the possibilities of being able to shorten
 the state space vector by eliminating connectioins that are for sure not
 going to participate in the learning.
\end_layout

\begin_layout Subsubsection*
Radius-based approach
\end_layout

\begin_layout Standard
It's easy to notice that it isn't needed to have roads connecting all intersecti
ons with all other intersections.
 This would make the city a convoluted mess.
 A valid approach to reduce the size of the state vector is to define a
 radius around the nodes and only store the number of lanes between them.
 For this a radius parameter will have to be input in order to define the
 possible connections before running the simulation.
 On the image below an example of such a circle is shown for graph node
 
\begin_inset Formula $E$
\end_inset

 with the radius of 150.
\end_layout

\begin_layout Standard
\align center
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset Graphics
	filename Exponential_radius.png
	width 8cm
	height 8cm
	keepAspectRatio

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
It is fairly straightforward to see that this would result in a configuration
 where no road's length exceeds the radius of the neighborhood.
 This can be considered as a good design approach because it would eliminate
 the need to build long and straight roads through the city which are shown
 to be more dangerous regarding traffic accidents.
 The reason for this is that motorists can go with higher speeds as the
 road is wide and forgiving like a highway.
 It is empirically shown that the best way to reduce speeds is to force
 the drivers to obey speed limits by creating the geometry of the road in
 a way that enforces it.
 One won't go with 70-90 km/h on a street that is say 150 meters long.
 
\end_layout

\begin_layout Standard
The disadvantage of this method is that the state vector would be unevenly
 distributed between the nodes of the graph.
 Some of the nodes would have more elements in the vector than others resulting
 an unnecessary high representation.
 It's also possible that an outlier node gets cut off from the rest, and
 becomes an 'island' that is unreachable from anywhere.
 This happening is considered a design fail.
 
\end_layout

\begin_layout Subsubsection*
NN-based method
\end_layout

\begin_layout Standard
The number of tracked connections in the state vector can also be reduced
 if only the 
\begin_inset Formula $m$
\end_inset

 nearest neighbors to a node is allowed.
 This would allow for a more evenly distributed state representation as
 for each node there's only a need to register 
\begin_inset Formula $m$
\end_inset

 connections instead of 
\begin_inset Formula $k-1$
\end_inset

.
 This approach would however also limit the number of incoming connections
 into a junction.
 E.g.
 if the parameter is set to 
\begin_inset Formula $m=4$
\end_inset

 the previously shown graph would not be possible to construct and some
 node may be separated from all other ones, isolating them from the rest
 of the infrastructure.
 This is considered a bad resolution of the problem.
 
\end_layout

\begin_layout Subsubsection*
Practical implementation
\end_layout

\begin_layout Standard
A combination of the previously mentioned methods can also be taken into
 consideration in order to reduce the state vector size, e.g.
 allowing connections from a specific radius but in cases where there's
 not a sufficient number of possible neighboring nodes the system will have
 to find the 
\begin_inset Formula $m$
\end_inset

 closest nodes and keep track of roads coming and going from them.
 It's also worth noting that combining the advantages of the two methods
 intelligently can yield a representation where each node has a specific,
 even number of connections that is significantly less than the total number
 of nodes in the system.
\end_layout

\begin_layout Subsection
Rewarding mechanism
\end_layout

\begin_layout Standard
At each time step in the reinforcement learning agent-environment framework,
 the agent takes an action and as a result, the environment changes its
 state and returns a reward to the environment.
 The agent can also observe the environment through the state variable described
 in the previous section.
 This part will deal with the principles that will be reflected during sending
 the reward signal to the agent.
 The main directives like exact costs and traffic engineering perspectives
 will be further explored in the literature review.
 For now it's enough to deal with the main.
\end_layout

\begin_layout Standard
The main goal for the agent is to build a city that is livable for humans
 by keeping the number of lanes and roads to the minimum at all times.
 If this constraint was not present, the agent could simply build 8-lane
 highways in streets that are a few hundred meters long.
 This would render being a pedestrian miserable.
 It's also necessary to not build roads between nodes that is not necessary
 from a transportation perspective.
 If there's a reasonable detour between two endpoints, the cars should take
 that road.
\end_layout

\begin_layout Subsubsection*
Inter-node infrastructure
\end_layout

\begin_layout Standard
The cost of building a lane has to be taken into consideration.
 It is more expensive to add new lanes to existing infrastructure than to
 build the first lanes at the beginning.
 This is because the sidewalk has to be destructed and then rebuilt.
 Also traffic flow is slower in the time of the construction because of
 closed roads, leading to congestions.
 Out of the 7 possible actions of the agent 4 are in relation to building
 roads and lanes.
 The relationship between them is the following:
\end_layout

\begin_layout Enumerate
The cost of building and destroying is linearly dependend on the length
 of the segment.
 The length cost of a unit of lane is 
\begin_inset Formula $l_{lane}.$
\end_inset


\end_layout

\begin_layout Enumerate
The cost of building a unit (e.g.
 meter) of one-way lane is: 
\begin_inset Formula $c_{lane}$
\end_inset

.
\end_layout

\begin_layout Enumerate
The cost of building a lane is taken as 
\begin_inset Formula $b_{lane}=c_{lane}*l_{lane}$
\end_inset

.
\end_layout

\begin_layout Enumerate
The cost of building a road is equivalent to building two lanes: 
\begin_inset Formula $b_{road}=2b_{lane}=2*c_{lane}*l_{lane}$
\end_inset

.
\end_layout

\begin_layout Enumerate
The cost of destroying a lane is less than building a lane.
 The coefficient parameter is denoted 
\begin_inset Formula $\delta$
\end_inset

: 
\begin_inset Formula $0<\delta<1$
\end_inset

 Then the cost of destroying is: 
\begin_inset Formula $d_{lane}=\delta b_{lane}=\delta*c_{lane}*l_{lane}$
\end_inset

.
\end_layout

\begin_layout Enumerate
Then the cost of destroying a road: 
\begin_inset Formula $d_{road}=2\delta b_{lane}$
\end_inset

.
\end_layout

\begin_layout Standard
The necessary inputs are: 
\begin_inset Formula $c_{lane},\delta$
\end_inset

.
\end_layout

\begin_layout Subsubsection*
Intra-node infrastructure
\end_layout

\begin_layout Standard
The next section will describe the cost of building different types of junctions.
 The types of junctions in increasing order of cost are: 
\end_layout

\begin_layout Enumerate
Right-hand intersection: it is the cheapest, however it is also the most
 unsafe.
 Cheap to build and to maintain.
 Also inexpensive to convert to from all other types of junctions.
 
\end_layout

\begin_layout Enumerate
Roundabout: a reasonable tradeoff between cost and safety, however it is
 difficult to destroy an intersection and build a roundabout in place of
 it as it requires widening the intersection.
 
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset Graphics
	filename junction-roundabout.png
	width 8cm
	height 8cm
	keepAspectRatio

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Traffic light: the most expensive and the safest type of junction is the
 traffic light one as it requires dedicated infrastructure and the maintenance
 costs are higher than in case of all the other junctions.
 
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset Graphics
	filename junction-trafficlight.png
	width 8cm
	height 8cm
	keepAspectRatio

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
As a graph node must be at all times assigned to a type of junction, and
 each type can be converted into any other type, the relationship between
 them can be defined by a triangle.
 The cost of converting from one to another can be parametrized and can
 be subject to change depending on how expensive building infrastructure
 is on a given terrain or economical environment.
 The conversion table is shown below: 
\end_layout

\begin_layout Standard
\align center
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset Graphics
	filename intersection_relations.png
	width 8cm
	height 8cm
	keepAspectRatio

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The conversion will require the inputs to and from each type of intersection,
 as these are not necessarily functions on eachother.
 Some dependency can be added later but that is independent of the current
 high-level model.
 The required inputs are: 
\begin_inset Formula $\alpha,\alpha\prime,\beta,\beta\prime,\gamma,\gamma\prime$
\end_inset

.
 
\end_layout

\begin_layout Subsection
Network architecture
\end_layout

\begin_layout Standard
// Network architecture comes here
\end_layout

\end_body
\end_document
