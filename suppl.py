"""
Supplementary methods for the Reader class and others
These methods don't belong to any specific class operation and may be used across the entire project
@author: daniel kuknyo
"""


def start_sim(roads: list, vehicle_mtx: dict, offset: tuple, steps_per_update: int) -> None:
    """
    A wrapper class to start the simulation based on parameters generated by a reader object.
    :param roads: matrix connecting each road as per coordinates [(A, B), (B, C)] where Node N --> (x, y) coordinates of floats
    :param vehicle_mtx: dict that controls the setting of vehicles: {vehicle_rate: :.2f, 'vehicles': [nr_of_vehicles, {'path': [index(A), index(B), index(C)]}]}
    :param offset: pygame offset parameter for the city in the window
    :param steps_per_update: number of steps passing between each frame of the simulation (should be turned off for learning phase)
    :return:
    """
    # Necessary imports
    from trafficSimulator.simulation import Simulation
    from trafficSimulator.window import Window
    # Set up everything
    sim = Simulation()
    sim.create_roads(roads)
    sim.create_gen(vehicle_mtx)
    win = Window(sim)
    win.offset = offset  # (x, y) tuple
    win.run(steps_per_update)


def letter_to_number(letter: str) -> int:
    """
    Converts a letter to a number in GeoGebra representation
    GeoGebra names points as [A, B, C, ..., Z, A1, B1, C1, ..., Z1, A2, B2, C2, ...]
    :param letter: the The letter to be converted to a number
    :return: the numeric representation of the letter starting with 0
    """
    if len(letter) == 1:  # A, B, C
        return ord(letter) - ord('A')
    else:  # A1, B1, C1
        return int(letter[1:]) * 26 + ord(letter[0]) - ord('A')


def drop_empty_keys(dct: dict) -> dict:
    """
    Drops the empty keys from a given dict and returns the dict itself
    :param dct: The dict to drop from
    :return: dict: The dict with the empty keys removed
    """
    for v in list(dct.keys()):
        if len(dct[v]) == 0:
            dct.pop(v, None)
    return dct
